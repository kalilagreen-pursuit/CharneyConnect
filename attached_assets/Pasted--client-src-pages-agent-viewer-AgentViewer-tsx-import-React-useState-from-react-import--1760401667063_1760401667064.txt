// client/src/pages/agent/viewer/AgentViewer.tsx

import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
// Import all necessary hooks
import { useClientDetails, useStartSession, useEndSession, useSessionStatus } from '@/lib/queryClient'; 
// Import the component that renders the list of leads for selection
import StartShowingDialog from '@/components/StartShowingDialog'; 
import UnitCardContainer from '@/pages/agent/viewer/UnitCardContainer'; // Component for the unit grid

const SARAH_CHEN_ID = "agent-001";
const PROJECT_ID = "THE JACKSON"; // Placeholder project ID

const AgentViewer: React.FC<{ clientId: string }> = ({ clientId: initialClientId }) => {
    
    // State to manage the active session and client selection
    const [activeClientId, setActiveClientId] = useState(initialClientId === 'new' ? null : initialClientId);
    const [sessionId, setSessionId] = useState<string | null>(null);
    const [isDialogOpen, setIsDialogOpen] = useState(initialClientId === 'new');

    // Data Hooks
    const { data: activeClient, isLoading: isClientLoading } = useClientDetails(activeClientId);
    const { data: sessionStatus, isLoading: isSessionLoading } = useSessionStatus(sessionId);
    const startSessionMutation = useStartSession(SARAH_CHEN_ID, PROJECT_ID);
    const endSessionMutation = useEndSession();
    
    // Handlers
    const handleStartSession = (contactId: string) => {
        startSessionMutation.mutate(contactId, {
            onSuccess: (data) => {
                setSessionId(data.sessionId);
                setActiveClientId(contactId);
                setIsDialogOpen(false);
            }
        });
    };

    const handleEndSession = () => {
        if (sessionId) {
            endSessionMutation.mutate(sessionId, {
                onSuccess: () => {
                    alert("Session ended! Follow-up tasks created automatically.");
                    setSessionId(null);
                    // Redirect to dashboard or clear client context
                }
            });
        }
    };
    
    // --- LAYOUT RENDER ---
    return (
        <div className="flex flex-col h-screen"> 
            
            {/* 1. Main Content Wrapper: Sidebar + Unit Grid */}
            <div className="flex flex-1 overflow-hidden">
                
                {/* 1.1. Sidebar (Client Context) */}
                <div className="w-80 bg-white border-r p-6 flex-shrink-0 overflow-y-auto">
                    <h3 className="text-xl font-bold mb-1">Agent: SARAH CHEN</h3>
                    <p className="text-sm text-gray-500 mb-4">Project: {PROJECT_ID}</p>
                    
                    <h4 className="text-lg font-bold mb-4 border-b pb-2">Client Context</h4>
                    {activeClient ? (
                        <>
                            <p className="font-semibold text-indigo-700 text-xl">{activeClient.name}</p>
                            <p className="text-sm text-gray-600 mb-4">Lead Score: {activeClient.leadScore}</p>
                            {/* Display Preferences from activeClient.preferences */}
                        </>
                    ) : (
                        <p className="text-sm text-red-500">No active client selected.</p>
                    )}
                    
                    {/* Start/End Session Button in Sidebar */}
                    <div className="mt-6 pt-4 border-t">
                        {!sessionId ? (
                            <Button 
                                className="w-full" 
                                onClick={() => setIsDialogOpen(true)}
                            >
                                START SHOWING
                            </Button>
                        ) : (
                            <Button 
                                className="w-full bg-red-600 hover:bg-red-700"
                                onClick={handleEndSession}
                                disabled={endSessionMutation.isPending}
                            >
                                {endSessionMutation.isPending ? 'Ending...' : 'END SESSION & FOLLOW-UP'}
                            </Button>
                        )}
                    </div>
                </div>

                {/* 1.2. Main Area (Unit Grid) */}
                <main className="flex-1 p-4 overflow-y-auto">
                    <div className="p-2 border-b mb-4">
                        <h2 className="text-2xl font-semibold">Units for {PROJECT_ID}</h2>
                        {/* Unit Toggle and Controls go here */}
                    </div>
                    
                    {/* Render the Unit Cards - CRITICAL: Pass client preferences for matching */}
                    <UnitCardContainer 
                        projectId={PROJECT_ID} 
                        clientPreferences={activeClient?.preferences}
                        sessionId={sessionId} 
                    />
                </main>
            </div>
            
            {/* 2. Bottom Tracker (Fixed Footer) */}
            <footer className="h-12 bg-gray-800 text-white flex justify-between items-center p-4 flex-shrink-0">
                <p className="font-semibold">Session Status: {sessionStatus?.status || 'INACTIVE'}</p>
                <p>Units Toured: {sessionStatus?.totalUnitsViewed || 0}</p>
                <p>Duration: {sessionStatus ? 'Active' : '0:00'}</p>
            </footer>

            {/* Client Selection Dialog */}
            {isDialogOpen && (
                // NOTE: You'll need to wrap this in an actual Dialog/Modal component
                <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
                    <div className="bg-white p-6 rounded-lg shadow-xl w-96">
                        <StartShowingDialog 
                            agentId={SARAH_CHEN_ID} 
                            projectId={PROJECT_ID} 
                            onSelectLead={handleStartSession} 
                        />
                        <Button variant="ghost" onClick={() => setIsDialogOpen(false)} className="mt-4">Cancel</Button>
                    </div>
                </div>
            )}
        </div>
    );
};

export default AgentViewer;